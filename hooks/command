#!/bin/bash

set -exuo pipefail

echo "--- :hammer: kustomize plugin"
return_code=1
debug_mode=1
timeout=0
job_image="bash"
job_image_tag="latest"
default_secret_name="kite-me"
default_secret_key="agent-ssh"
default_init_image="myobplatform/k8s-buildkite-agent"
default_init_image_tag="0.2.0"

function cleanup {
  kubectl delete job ${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_NAME}
}
trap cleanup EXIT

if [[ "${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_DEBUG:-false}" =~ (true|on|1) ]] ; then
  echo "--- :hammer: Enabling debug mode"
  debug_mode=0
  set -x
fi

if [[ -z "${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_NAME:-}" ]] ; then
  echo "required property name is not set."
  exit 1
fi

if [[ -z "${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_OVERLAY:-}" ]] ; then
  echo "required property overlay is not set."
  exit 1
fi

if [[ ! -d "${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_OVERLAY}" ]] ; then
  echo "required property overlay directory is not found: ${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_OVERLAY}"
  exit 1
fi

if [[ ! -f "${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_OVERLAY}/kustomization.yaml" ]] ; then
  echo "missing kustomization.yaml file in directory ${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_OVERLAY}"
  exit 1
fi

if [[ "${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_TIMEOUT:-${timeout}}" != "${timeout}" ]] ; then
  timeout=${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_TIMEOUT}
  echo "setting timeout to ${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_TIMEOUT}"
fi

if [[ "${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_IMAGE:-bash}" != "bash" ]] ; then
  job_image=${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_IMAGE}
  echo "setting image to ${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_IMAGE}"
fi

if [[ "${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_IMAGE_TAG:-latest}" != "latest" ]] ; then
  job_image_tag=${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_IMAGE_TAG}
  echo "setting image tag to ${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_IMAGE_TAG}"
fi

mkdir -p /kustomize/base

cat <<EOF > /kustomize/base/kustomization.yaml
resources:
- batch.yaml
imageTags:
- name: ${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_INIT_IMAGE:-${default_init_image}}
  newTag: ${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_INIT_IMAGE_TAG:-${default_init_image_tag}}
commonLabels:
  app: buildkite-kustomize-job
  build: ${BUILDKITE_BUILD_ID}
  pipeline: ${BUILDKITE_PIPELINE_SLUG}
EOF

cat <<EOF > /kustomize/base/batch.yaml
---
apiVersion: batch/v1
kind: Job
metadata:
  name: ${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_NAME}
spec:
  backoffLimit: 0
  completions: 1
  template:
    spec:
      containers:
      - name: step
        image: "${job_image}:${job_image_tag}"
        command: [ "find", "." ]
        workingDir: /buildkite/builds/${BUILDKITE_AGENT_NAME}/${BUILDKITE_ORGANIZATION_SLUG}/${BUILDKITE_PIPELINE_SLUG}
        env:
        - name: BUILDKITE_JOB_ID
          value: "${BUILDKITE_JOB_ID}"
        - name: BUILDKITE_BUILD_NUMBER
          value: "${BUILDKITE_BUILD_NUMBER}"
        - name: BUILDKITE_REPO
          value: "${BUILDKITE_REPO}"
        - name: BUILDKITE_COMMIT
          value: "${BUILDKITE_COMMIT}"
        - name: BUILDKITE_BRANCH
          value: "${BUILDKITE_BRANCH}"
        - name: BUILDKITE_TAG
          value: "${BUILDKITE_TAG}"
        - name: BUILDKITE_AGENT_NAME
          value: "${BUILDKITE_AGENT_NAME}"
        - name: BUILDKITE_ORGANIZATION_SLUG
          value: "${BUILDKITE_ORGANIZATION_SLUG}"
        - name: BUILDKITE_PIPELINE_SLUG
          value: "${BUILDKITE_PIPELINE_SLUG}"
        volumeMounts:
        - mountPath: /buildkite/builds
          name: checkout-volume
      initContainers:
      - name: checkout
        image: ${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_INIT_IMAGE:-${default_init_image}}
        args: [ "bootstrap", "--command", "true" ]
        env:
        - name: BUILDKITE_JOB_ID
          value: "${BUILDKITE_JOB_ID}"
        - name: BUILDKITE_REPO
          value: "${BUILDKITE_REPO}"
        - name: BUILDKITE_COMMIT
          value: "${BUILDKITE_COMMIT}"
        - name: BUILDKITE_BRANCH
          value: "${BUILDKITE_BRANCH}"
        - name: BUILDKITE_BUILD_PATH
          value: /buildkite/builds
        - name: BUILDKITE_TAG
          value: "${BUILDKITE_TAG}"
        - name: BUILDKITE_AGENT_NAME
          value: "${BUILDKITE_AGENT_NAME}"
        - name: BUILDKITE_ORGANIZATION_SLUG
          value: "${BUILDKITE_ORGANIZATION_SLUG}"
        - name: BUILDKITE_PIPELINE_SLUG
          value: "${BUILDKITE_PIPELINE_SLUG}"
        - name: BUILDKITE_PIPELINE_PROVIDER
          value: "${BUILDKITE_PIPELINE_PROVIDER}"
        - name: BUILDKITE_PULL_REQUEST
          value: "${BUILDKITE_PULL_REQUEST}"
        - name: SSH_PRIVATE_RSA_KEY
          valueFrom:
            secretKeyRef:
              key: ${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_SECRET_KEY:-${default_secret_key}}
              name: ${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_SECRET_NAME:-${default_secret_name}}
        volumeMounts:
        - mountPath: /buildkite/builds
          name: checkout-volume
      volumes:
        - name: checkout-volume
          emptyDir: {}
      restartPolicy: Never

EOF

if [[ $debug_mode ]] ; then
  kustomize build "${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_OVERLAY}"
fi
kustomize build "${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_OVERLAY}" | kubectl apply -f -

sleeper=10
counter=${timeout}
jobstatus=$(kubectl get job "${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_NAME}" -o jsonpath={.status.conditions[].type})
while [[ -z "$jobstatus" ]] ; do
      echo -n "."
      sleep "$sleeper"
      jobstatus=$(kubectl get job "${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_NAME}" -o jsonpath={.status.conditions[].type})
      if [[ $timeout -gt 0 ]]; then
        (( counter -= sleeper )) || jobstatus="timeout"
      fi
done

return_code=1
echo
echo "status: $jobstatus"
if [[ "$jobstatus" == "Complete" ]] ; then
  echo "success"
  return_code=0
fi

echo "--- :kubernetes: job output"
kubectl logs job/${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_NAME}

exit $return_code
