#!/bin/bash

set -euo pipefail

return_code=1
debug_mode=0
timeout=600

if [[ "${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_DEBUG:-false}" =~ (true|on|1) ]] ; then
  echo "--- :hammer: Enabling debug mode"
  debug_mode=1
  set -x
fi

if [[ -z "${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_NAME:-}" ]] ; then
  echo "required property name is not set."
  exit 1
fi

if [[ -z "${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_OVERLAY:-}" ]] ; then
  echo "required property overlay is not set."
  exit 1
fi

if [[ ! -d "${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_OVERLAY}" ]] ; then
  echo "required property overlay directory is not found: ${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_OVERLAY}"
  exit 1
fi

if [[ ! -f "${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_OVERLAY}/kustomization.yaml" ]] ; then
  echo "missing kustomization.yaml file in directory ${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_OVERLAY}"
  exit 1
fi


if [[ "${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_TIMEOUT:-${timeout}}" != "${timeout}" ]] ; then
  timeout=${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_TIMEOUT}
  echo "setting timeout to ${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_TIMEOUT}"
fi

mkdir -p /kustomize/base

cat <<EOF > /kustomize/base/kustomization.yaml
resources:
- batch.yaml
imageTags:
- name: myobplatform/k8s-buildkite-agent
  newTag: 0.2.0
commonLabels:
  app: buildkite-kustomize-job
  build: ${BUILDKITE_BUILD_ID}
  pipeline: ${BUILDKITE_PIPELINE_SLUG}
EOF

cat <<EOF > /kustomize/base/batch.yaml
---
apiVersion: batch/v1
kind: Job
metadata:
  name: ${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_NAME}
spec:
  backoffLimit: 0
  completions: 1
  template:
    spec:
      containers:
      - name: step
        image: bash
        command: [ "find", "." ]
        workingDir: /buildkite/builds/${BUILDKITE_AGENT_NAME}/${BUILDKITE_ORGANIZATION_SLUG}/${BUILDKITE_PIPELINE_SLUG}
        env:
        - name: BUILDKITE_JOB_ID
          value: "${BUILDKITE_JOB_ID}"
        - name: BUILDKITE_REPO
          value: "${BUILDKITE_REPO}"
        - name: BUILDKITE_COMMIT
          value: "${BUILDKITE_COMMIT}"
        - name: BUILDKITE_BRANCH
          value: "${BUILDKITE_BRANCH}"
        - name: BUILDKITE_TAG
          value: "${BUILDKITE_TAG}"
        - name: BUILDKITE_AGENT_NAME
          value: "${BUILDKITE_AGENT_NAME}"
        - name: BUILDKITE_ORGANIZATION_SLUG
          value: "${BUILDKITE_ORGANIZATION_SLUG}"
        - name: BUILDKITE_PIPELINE_SLUG
          value: "${BUILDKITE_PIPELINE_SLUG}"
        volumeMounts:
        - mountPath: /buildkite/builds
          name: checkout-volume
      initContainers:
      - name: checkout
        image: myobplatform/k8s-buildkite-agent:0.2.0
        args: [ "bootstrap", "--command", "true" ]
        env:
        - name: BUILDKITE_JOB_ID
          value: "${BUILDKITE_JOB_ID}"
        - name: BUILDKITE_REPO
          value: "${BUILDKITE_REPO}"
        - name: BUILDKITE_COMMIT
          value: "${BUILDKITE_COMMIT}"
        - name: BUILDKITE_BRANCH
          value: "${BUILDKITE_BRANCH}"
        - name: BUILDKITE_BUILD_PATH
          value: /buildkite/builds
        - name: BUILDKITE_TAG
          value: "${BUILDKITE_TAG}"
        - name: BUILDKITE_AGENT_NAME
          value: "${BUILDKITE_AGENT_NAME}"
        - name: BUILDKITE_ORGANIZATION_SLUG
          value: "${BUILDKITE_ORGANIZATION_SLUG}"
        - name: BUILDKITE_PIPELINE_SLUG
          value: "${BUILDKITE_PIPELINE_SLUG}"
        - name: BUILDKITE_PIPELINE_PROVIDER
          value: "${BUILDKITE_PIPELINE_PROVIDER}"
        - name: BUILDKITE_PULL_REQUEST
          value: "${BUILDKITE_PULL_REQUEST}"
        - name: SSH_PRIVATE_RSA_KEY
          valueFrom:
            secretKeyRef:
              key: ${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_SECRET_KEY:-agent-ssh}
              name: ${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_SECRET_NAME:-buildkite-agent}
        volumeMounts:
        - mountPath: /buildkite/builds
          name: checkout-volume
      volumes:
        - name: checkout-volume
          emptyDir: {}
      restartPolicy: Never

EOF

if [[ $debug_mode ]] ; then
  kustomize build "${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_OVERLAY}"
fi
kustomize build "${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_OVERLAY}" | kubectl apply -f -

sleeper=10
counter=$timeout
jobstatus=$(kubectl get job "${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_NAME}" -o jsonpath={.status.conditions[].type})
while [[ -z "$jobstatus" ]] ; do
      echo -n "."
      sleep "$sleeper"
      jobstatus=$(kubectl get job "${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_NAME}" -o jsonpath={.status.conditions[].type})
      (( counter -= sleeper ))
      if [[ $counter -le 0 ]] ; then
        echo "timeout"
        break
      fi
done

return_code=1
echo "status: $jobstatus"
if [[ "$jobstatus" == "Complete" ]] ; then
  echo "success"
  return_code=0
fi

echo "--- :kubernetes: job output"
kubectl logs job/${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_NAME}
kubectl delete job ${BUILDKITE_PLUGIN_KUSTOMIZE_JOB_NAME}

exit $return_code
